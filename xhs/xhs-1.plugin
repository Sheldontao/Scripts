#!name=广告拦截&净化合集
#!desc=(支持约564款APP/小程序)针对部分APP和小程序广告进行拦截，某些APP要清除缓存或者重新安装拦截广告才会生效！规则明细可以查看本插件的注释
#!rule-details=12123, 12306, 21经济网, 2345天气王, 360儿童卫士, 36kr, 555影视, 51信用卡管家, 58, 500, 51job, AcFun, AppSo, 阿里巴巴, 阿里云盘, 爱奇艺, 爱企查, 爱回收, 爱思助手, 爱美剧, 爱阅书香, 爱桐乡, 安徽掌上10000, 安吉星, 澳觅, Blued, 半月谈, 宝宝树孕育, 北京银行, 掌上京彩, 百度地图, 百度输入法, 百度网盘, 百度贴吧, 百度翻译, 百度文库, 百度, 百信银行, 哔哩哔哩, 哔哩哔哩漫画, 北京首汽, 贝壳找房, 贝太厨房, 菠萝包轻小说, 比特球云盘, 币世界, 币安, 乐刻, 必胜客, 百视TV, 波点音乐, 薄荷健康, clicli, csdn, crunchyroll, 彩云天气, 菜鸟裹裹, 超星学习通, 长城炼金术, 曹操专车, 车来了, 超级课程表, 潮玩宇宙, 财新, 财联社, 财经杂志, 刺猬猫阅读, 创客贴设计, DJI Store (大疆商城), 大麦, 大师兄, 大智慧, 大众点评, 达达骑士版, 动卡空间, 到梦空间, 低端影视, 豆瓣, 斗鱼直播, 当当阅读, 叮咚买菜, 叮嗒出行, 东方财富, 懂球帝, 丁香医生, 丁香园, 钉钉, 动画疯, 滴滴出行, 滴滴青桔, 滴滴代驾小程序, 嘀嗒出行, 得物, 电E宝, 电视家, 盯盯拍, e代驾, e充电, 饿了么, Flightradar24, 飞猪 + 阿里巴巴, 飞常准, 飞客茶馆, 番茄小说, 樊登读书, 丰巢, 凤凰秀, 富途牛牛, 分期乐, 返利网, 发现精彩, 粉笔, 光大银行, 光大银行 阳光惠生活, 工商银行, 工银E生活, 工银e生活小程序, 广发银行, 广州农商银行, 广汽传祺, 国泰君安, 国家医保服务平台, 高德地图, 国家地理, 谷歌, 挂号网（微医）, 国美电器, 故宫博物馆小程序, 怪兽充电, 盖得排行, 冠寓, 广汽本田, 怪兽充电 微信小程序, 工时记录, 高铁管家, 华彩生活, 华尔街见闻, 虎牙直播, 华住会, 韩剧TV, 好奇心日报, 好好住, 火猫, 花生地铁, 花小猪, 虎扑, 杭州市民, 杭州公交, 红版报, 虎嗅, 黄油相机, 华宝智投, 航旅纵横, 汇丰汇选, 和风天气, 合利宝展业通, 盒马, 海豚优惠, 海尔服务小程序, 好型体重秤, 横店电影小程序, 汇付天下, 海马爸比, i3, IT之家, 吉林银行, 江苏银行, 建行生活, 简讯, 金山词霸, 京东, 京东健康, 京喜, 京东金融, 京东读书, 京东云无线宝, 界面新闻, 驾校一点通, 驾考宝典, 金十数据, 今日头条, 今日水印相机, 加油广东, 韭菜公社, 机核网, 街电 微信小程序, 极简汇率, keep, 快看, 快手, 夸克, 酷我音乐, 看天下, 看理想, 快递100, 开源中国, 快手联盟,优量汇,穿山甲「广告联盟」, 口袋校园, 考公雷达/公考雷达, 酷安, 肯德基, Line, 拉卡拉, 懒人听书, 懒投资, 来疯, 来电 小程序净化, 莱充, 蓝基因, 乐橙, 乐堡潮玩馆小程序, 联想, 拦截100, 旅法师营地, LING Club-原菱菱邦, LocSim, lofter, linxi, 两步路, 猎聘, MIX, 妈妈网孕育, 猫耳FM, 猫眼, 美团 & 美团外卖, 美团众包, 美团充电宝小程序, 每日优鲜, 买单吧, 民生银行, 全民生活, 芒果TV, 马蜂窝, 马达出行, 咪咕视频, 秒拍, 美图秀秀, 马卡龙玩图, 蘑菇租房, 美味不用等, 漫画人, 埋堆堆, 脉脉, 麦当劳, NTPlay, 农业银行, 奈菲影视, 南方航空, 宁聚, 牛津高阶词典第十版, 牛听听, ofo共享单车, ONE, omofun, Oray, pikpak, PushPlus微信推送广告, 浦发银行, 浦大喜奔, 朴朴超市, 平安好车主, 平安壹钱包, 平安证券, 平安口袋银行, 拼多多, 票根, 票星球, 澎湃新闻, 皮皮虾, 皮皮搞笑评论区, QQ钱包, QQ浏览器, QQ音乐, 去哪儿, 起点读书, 七猫小说, 汽车之家, 穷游, 汽水音乐, 球迷报, 亲宝宝, 全民K歌, 全家便利店, 全能浏览器, 全球购骑士卡, 去哒, Reddit, 人民日报, 人人视频, 日日煮, 日淘任意门, 日产智联, RARBG, 瑞幸咖啡, spotify, Soul, Stay, 苏宁, 苏e行, 苏周到, 苏打校园APP, 四季線上影視, 四川航空, 搜狐, 搜狗输入法, 搜电充电 微信小程序, 深圳通, 盛趣游戏, 什么值得买, 神马, 顺丰快递, 顺丰快递小程序, 顺丰优选, 少数派, 书旗小说, 神舟汽车, 上汽大众, 首汽约车, 首旅如家, 三联中读, 识货, 闪现一下, 闪动校园, 山姆会员商店, 旅途随身听, 收钱吧 买单小程序, 省省回头车, TestFlight, TT语音, TapTap, TubeMax, top-widget, 天府市民云, 天府手机银行, 天府银行小程序, 天府通, 天山云TV, 天天基金, 天星金融, 天猫精灵, 天猫养车, 天翼云盘, 同花顺, 同程旅行, 淘票票, 淘淘阅读, 途牛, 途虎养车小程序, 途家民宿, 太平洋电脑, 太平洋知科技, 天气通 分流即可, 淘宝, 腾讯视频, 腾讯乘车码微信小程序, 腾讯游戏社区, 腾讯游戏, 腾讯手机管家, 腾讯地图, 腾讯新闻, 腾讯体育, 腾讯广告, 推栏, U净, udn news, vgTime, Vista看天下, Weico(微博客户端), WPS, WIFI万能钥匙, 完美世界电竞, 万词王, 万达电影小程序, 微信, 网易新闻, 网易有钱, 网易严选, 网易蜗牛读书, 网易考拉, 网易云音乐, 网易邮箱, 网易, 网易大神, 网易有道词典, 网上国网, 威锋, 微店, 无他相机, 悟空遥控器, 蜗牛睡眠, 本来生活, 唯品会, 稿定设计, 温尼伯站, 小米商城, 小米有品, 小米运动, 小米打印, 小米金融, 米家, 米读, 米游社, 雪球, 下厨房, 兴业银行, 兴业生活, 星火英语, 星途 starway, 星财富, 迅雷, 迅游加速器, 小睡眠, 小特- 首选特斯拉中文社区, 小利生活, 小兔充充, 小电充电 微信小程序, 小合拓展, 小牛, 小桔科技, 小艺, 小Biu智家, 小熊艺术, 小佩宠物, 小白学习打印机 开屏广告, 小象超市, 小芒, 小蚕霸王餐, 晓晓优选, 希尔顿 荣誉客会, 希沃白板5, 西施眼, 西窗烛, 稀饭动漫, 向日葵, 心悦俱乐部, 兴业证券, 熊猫直播, 讯飞, 携程, 虾米音乐, 厦门航空, 闲鱼, 新浪新闻, 新片场, 香蕉是一种水果, 小红书, 喜马拉雅, YouTube, 曜影医疗, 云闪付, 邮储银行, 银盛通, 盈宝证券, 盈立智投, 优酷, 游戏时光, 永辉, 悠洗APP, 一淘, 一号店, 一汽大众, 一起考教师, 有兔阅读(米兔), 雅虎, 印象笔记, 易车, 易捷加油小程序, 易校园, 萤石, 云宝宝大数据, 友邻优课, 友邦, 医考帮, 艺龙旅行网, 映客直播, 云麦, 央视, 央视频, 猿辅导, 一刻相册, 易捷加油, 翼支付, 鸭奈飞, 优书, 育学园, 亚马逊, 亚朵开屏, 永安行, 招商银行, 掌上生活, 中国银行, 中国银行 缤纷生活, 中信银行, 中国移动, 中国移动 江苏, 中国移动 安徽, 中国移动 广东, 中国移动 广西, 中国移动 山东, 中国移动云盘, 中国联通, 中国电信, 中国广电, 中国天气网小程序, 中国知网, 中国人保, 中油优途, 中羽在线, 中通快递, 中银跨境GO, 中油好客e站小程序, 中关村在线, 众邦银行, 涨乐财富通, 知乎, 追书神器, 作业帮, 掌阅, 掌上道具城, 掌上公交, 掌上鹿城, 字节跳动, 最右, 转转, 掌上英雄联盟, 浙里办, 郑好办, 住这儿, 指点天下, 猪八戒, 智行APP, 自如, 追剧达人, 职工普惠, 正气助手, 招财猫直聘, 中国国际航空
#!author=奶思[https://github.com/fmz200]
#!icon=https://raw.githubusercontent.com/fmz200/wool_scripts/main/icons/apps/AdblockPlus.png
#!homepage=https://github.com/fmz200/wool_scripts
#!raw-url=https://github.com/fmz200/wool_scripts/raw/main/Loon/plugin/blockAds.plugin
#!tg-group=https://t.me/lanjieguanggao
#!category=奶思的模块
#!tag=去广告, fmz200, 奶思
#!system=iOS, iPadOS
#!system_version = 
#!loon_version = 
#!date=2025-07-11 20:00:00
#!remark=下方的所有规则都标注了对应的hostname，可能存在错误或者遗漏，欢迎反馈。对于无法/可选MITM的hostname都特别做了“如开启可自行添加主机名”提示，如果提示后面没有标注主机名则包含所有主机名，否则只包含提示语后面的主机名。
#############################################
# "reject"        策略返回 HTTP 状态码 404,不附带任何额外内容
# "reject-200"    策略返回 HTTP 状态码 200,不附带任何额外内容
# "reject-img"    策略返回 HTTP 状态码 200,同时附带 1px gif
# "reject-dict"   策略返回 HTTP 状态码 200,同时附带一个空的 JSON 对象
# "reject-array"  策略返回 HTTP 状态码 200,同时附带一个空的 JSON 数组
#############################################
# 常见问题：
# 1️⃣：我知道规则，不知道主机名怎么办？
# ✅：几乎所有的主机名都是从规则中提取出来的，先有的规则再有的主机名
# 举个栗子：12306的一条规则URL👉🏻^https?:\/\/ad\.12306\.cn\/ad\/ser\/getAdList
# 只需要去掉反斜杠：^https?://ad.12306.cn/ad/ser/getAdList
# 不用再说了吧，ad.12306.cn就是想要的主机名
# 2️⃣：有些常用的软件为什么没有去广告配置？
# ✅：如果要利用重写去广告，就需要对请求或响应信息进行解密(MITM)，现在一些软件已经禁止了MITM，所以就无法去广告。
# 3️⃣：Loon如果在插件里面写了规则，在规则配置里也写了，哪个优先生效？
# ✅：插件里的规则优先生效。
#############################################

[Argument]

# > 网易云音乐

xnhsuu_enable = switch,true,false,tag=小红书-脚本开关




[Rule]


# >>>>>>>>>>>>>>> ✅ X ✅ <<<<<<<<<<<<<<
# > 小红书
AND, ((PROTOCOL, QUIC), (DOMAIN-SUFFIX, xiaohongshu.com)), REJECT





[Rewrite]



# > 小红书
# hostname = edith.xiaohongshu.com, www.xiaohongshu.com, ci.xiaohongshu.com, rec.xiaohongshu.com, so.xiaohongshu.com
# 惊喜弹窗
^https:\/\/edith\.xiaohongshu\.com\/api\/sns\/v1\/surprisebox\/(?:get_style|open|submit_action) reject-dict
^https?:\/\/www\.xiaohongshu\.com\/api\/marketing\/box\/trigger\? reject-dict
# 信息流
^https?:\/\/edith\.xiaohongshu\.com\/api\/sns\/v\d\/note\/guide\? reject-dict
^https?:\/\/edith\.xiaohongshu\.com\/api\/sns\/v\d\/guide\/user_banner reject-dict
^https?:\/\/www\.xiaohongshu\.com\/api\/sns\/(v\d\/ads\/resource|v\d\/hey\/\w+\/hey_gallery) reject-dict
# 评论区图片水印
^https?:\/\/ci\.xiaohongshu\.com\/system_config\/watermark reject-img





# =====================================
# 脚本
# =====================================
[Script]


# > 小红书
# 搜索页
http-response ^https?:\/\/edith\.xiaohongshu\.com\/api\/sns\/v\d\/search\/(banner|hot)_list script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书搜索页, enable={xnhsuu_enable}
http-response ^https?:\/\/edith\.xiaohongshu\.com\/api\/sns\/v\d\/search\/(hint|trending)\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书搜索页, enable={xnhsuu_enable}
http-response ^https?:\/\/(so|edith)\.xiaohongshu\.com\/api\/sns\/v\d\/search\/notes\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书搜索页, enable={xnhsuu_enable}
# 开屏广告
http-response ^https?:\/\/edith\.xiaohongshu\.com\/api\/sns\/v\d\/system_service\/config\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书开屏广告, enable={xnhsuu_enable}
http-response ^https?:\/\/edith\.xiaohongshu\.com\/api\/sns\/v\d\/system_service\/splash_config script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书开屏广告, enable={xnhsuu_enable}
# 详情页,小部件
http-response ^https?:\/\/edith\.xiaohongshu\.com\/api\/sns\/v\d\/note\/widgets script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书详情页, enable={xnhsuu_enable}
# 图片水印,视频水印
http-response ^https?:\/\/(edith|rec|www)\.xiaohongshu\.com\/api\/sns\/v\d\/note\/(imagefeed|live_photo\/save) script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书图片视频水印, enable={xnhsuu_enable}
http-response ^https?:\/\/(edith|rec|www)\.xiaohongshu\.com\/api\/sns\/v\d\/(followfeed|homefeed)\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书图片视频水印, enable={xnhsuu_enable}
http-response ^https?:\/\/(edith|rec|www)\.xiaohongshu\.com\/api\/sns\/(v2\/note\/feed|v3\/note\/videofeed)\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书图片视频水印, enable={xnhsuu_enable}
http-response ^https?:\/\/(edith|rec|www)\.xiaohongshu\.com\/api\/sns\/(v4\/note\/videofeed|v10\/note\/video\/save)\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书图片视频水印, enable={xnhsuu_enable}
# 评论区图片、live图水印，表情包下载
http-response ^https:\/\/edith\.xiaohongshu\.com\/api\/sns\/(v5\/note\/comment\/list|v3\/note\/comment\/sub_comments)\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书评论区去水印存储, enable={xnhsuu_enable}
http-response ^https:\/\/edith\.xiaohongshu\.com\/api\/sns\/v1\/interaction\/comment\/video\/download\? script-path=https://github.com/fmz200/wool_scripts/raw/main/Scripts/xiaohongshu/xiaohongshu.js, requires-body=true, timeout=60, tag=小红书评论区去水印下载, enable={xnhsuu_enable}




# =====================================
# MITM：中间人攻击，解密/跳过相关域名的内容，"-"开头为跳过
# =====================================
[MITM]
hostname = www.xiaohongshu.com, edith.xiaohongshu.com, ci.xiaohongshu.com, rec.xiaohongshu.com, so.xiaohongshu.com



/**
 * @author fmz200
 * @function 小红书去广告、净化、解除下载限制、画质增强等
 * @date 2025-06-18 19:27:00
 * @quote @RuCu6
 */

const $ = new Env('小红书');
const url = $request.url;
let rsp_body = $response.body;
if (!rsp_body) {
  $done({});
}
let obj = JSON.parse(rsp_body);

if (url.includes("/search/banner_list")) {
  obj.data = {};
} 

if (url.includes("/search/hot_list")) {
  // 热搜列表
  obj.data.items = [];
}

if (url.includes("/search/hint")) {
  // 搜索栏填充词
  obj.data.hint_words = [];
}

if (url.includes("/search/trending?")) {
  // 搜索栏
  obj.data.queries = [];
  obj.data.hint_word = {};
}

if (url.includes("/search/notes?")) {
  // 搜索结果
  if (obj.data.items?.length > 0) {
    obj.data.items = obj.data.items.filter((i) => i.model_type === "note");
  }
}

if (url.includes("/system_service/config?")) {
  // 整体配置
  const item = ["app_theme", "loading_img", "splash", "store"];
  if (obj.data) {
    for (let i of item) {
      delete obj.data[i];
    }
  }
}

if (url.includes("/system_service/splash_config")) {
  // 开屏广告
  if (obj?.data?.ads_groups?.length > 0) {
    for (let i of obj.data.ads_groups) {
      i.start_time = 3818332800; // Unix 时间戳 2090-12-31 00:00:00
      i.end_time = 3818419199; // Unix 时间戳 2090-12-31 23:59:59
      if (i?.ads?.length > 0) {
        for (let ii of i.ads) {
          ii.start_time = 3818332800; // Unix 时间戳 2090-12-31 00:00:00
          ii.end_time = 3818419199; // Unix 时间戳 2090-12-31 23:59:59
        }
      }
    }
  }
}

if (url.includes("/note/imagefeed?") || url.includes("/note/feed?")) {
  // 信息流 图片
  if (obj?.data?.length > 0) {
    if (obj.data[0]?.note_list?.length > 0) {
      for (let item of obj.data[0].note_list) {
        if (item?.media_save_config) {
          // 水印开关
          item.media_save_config.disable_save = false;
          item.media_save_config.disable_watermark = true;
          item.media_save_config.disable_weibo_cover = true;
        }
        if (item?.share_info?.function_entries?.length > 0) {
          // 下载限制
          const addItem = {type: "video_download"};
          let func = item.share_info.function_entries[0];
          if (func?.type !== "video_download") {
            // 向数组开头添加对象
            item.share_info.function_entries.unshift(addItem);
          }
        }
      }

      const images_list = obj.data[0].note_list[0].images_list;
      // 画质增强
      obj.data[0].note_list[0].images_list = imageEnhance(JSON.stringify(images_list));
      // 保存无水印信息
      $.setdata(JSON.stringify(images_list), "fmz200.xiaohongshu.feed.rsp");
      console.log('已存储无水印信息♻️');
    }
  }
} 

if (url.includes("/note/live_photo/save")) {
  console.log('原body：' + rsp_body);
  const rsp = $.getdata("fmz200.xiaohongshu.feed.rsp");
  console.log("读取缓存key：fmz200.xiaohongshu.feed.rsp");
  // console.log("读取缓存val：" + rsp);
  if (rsp == null || rsp.length === 0) {
    console.log('缓存无内容，返回原body');
    $done({body: rsp_body});
  }
  const cache_body = JSON.parse(rsp);
  let new_data = [];
  for (const images of cache_body) {
    if (images.live_photo_file_id) {
      const item = {
        file_id: images.live_photo_file_id,
        video_id: images.live_photo.media.video_id,
        url: images.live_photo.media.stream.h265[0].master_url
      };
      new_data.push(item);
    }
  }
  if (obj.data.datas) {
    replaceUrlContent(obj.data.datas, new_data);
  } else {
    obj = {"code": 0, "success": true, "msg": "成功", "data": {"datas": new_data}};
  }
  console.log('新body：' + JSON.stringify(obj));
} 

if (url.includes("/note/widgets")) {
  const item = ["cooperate_binds", "generic", "note_next_step"];
  if (obj?.data) {
    for (let i of item) {
      delete obj.data[i];
    }
  }
} 

if (url.includes("/v3/note/videofeed?")) {
  // 信息流 视频
  if (obj?.data?.length > 0) {
    for (let item of obj.data) {
      if (item?.media_save_config) {
        // 水印
        item.media_save_config.disable_save = false;
        item.media_save_config.disable_watermark = true;
        item.media_save_config.disable_weibo_cover = true;
      }
      if (item?.share_info?.function_entries?.length > 0) {
        // 下载限制
        const addItem = {type: "video_download"};
        let func = item.share_info.function_entries[0];
        if (func?.type !== "video_download") {
          // 向数组开头添加对象
          item.share_info.function_entries.unshift(addItem);
        }
      }
    }
  }
}

// 信息流 视频
if (url.includes("/v4/note/videofeed")) {
  let videoData = [];
  if (obj.data?.length > 0) {
    for (let item of obj.data) {
      // 添加下载按钮（如果未存在）
      if (item?.share_info?.function_entries?.length > 0) {
        const hasDownload = item.share_info.function_entries.some(entry => entry.type === "video_download");
        if (!hasDownload) {
          console.log(`添加下载按钮: ${item.id}`);
          item.share_info.function_entries.push({type: "video_download"});
        }
      }

      // 提取 H.265 视频流
      const h265List = item?.video_info_v2?.media?.stream?.h265 || [];
      if (!Array.isArray(h265List) || h265List.length === 0) {
        console.log(`无 h265 视频: ${item.id}`);
        continue;
      }

      // 分辨率从高到低排序
      const sortedList = h265List.filter(v => !!v.master_url && !!v.height).sort((a, b) => b.height - a.height);
      // 选择分辨率最高的
      let selectedStream = sortedList[0];

      // 存入缓存数组
      if (item?.id && selectedStream?.master_url) {
        const data = {
          id: item.id,
          url: selectedStream.master_url
        };
        console.log(`提取成功 ➜ ${item.id} → ${selectedStream.stream_desc}`);
        videoData.push(data);
      } else {
        console.log(`未找到可用视频: ${item.id}`);
      }
    }
    // 写入本地持久化缓存
    $.setdata(JSON.stringify(videoData), "redBookVideoFeed");
    console.log(`已缓存普通视频 ${videoData.length} 条`);
  }
}

// 视频保存请求
if (url.includes("/v10/note/video/save")) {
  let videoFeed = JSON.parse($.getdata("redBookVideoFeed")); // 读取持久化存储
  if (obj.data?.note_id !== "" && videoFeed?.length > 0) {
    for (let item of videoFeed) {
      if (item.id === obj.data.note_id) {
        obj.data.download_url = item.url;
      }
    }
  }
  // 解除下载限制
  if (obj.data?.disable) {
    delete obj.data.disable;
    delete obj.data.msg;
    obj.data.status = 2;
  }
}

if (url.includes("/user/followings/followfeed")) {
  // 关注页信息流 可能感兴趣的人
  if (obj?.data?.items?.length > 0) {
    // 白名单
    obj.data.items = obj.data.items.filter((i) => i?.recommend_reason === "friend_post");
  }
} 

if (url.includes("/v4/followfeed")) {
  // 关注列表
  if (obj?.data?.items?.length > 0) {
    // recommend_user 可能感兴趣的人
    obj.data.items = obj.data.items.filter((i) => !["recommend_user"].includes(i.recommend_reason));
  }
}  

if (url.includes("/recommend/user/follow_recommend")) {
  // 用户详情页 你可能感兴趣的人
  if (obj?.data?.title === "你可能感兴趣的人" && obj?.data?.rec_users?.length > 0) {
    obj.data = {};
  }
} 

if (url.includes("/v6/homefeed")) {
  if (obj?.data?.length > 0) {
    // 信息流广告
    let newItems = [];
    for (let item of obj.data) {
      if (item?.model_type === "live_v2") {
        // 信息流-直播
      } else if (item?.hasOwnProperty("ads_info")) {
        // 信息流-赞助
      } else if (item?.hasOwnProperty("card_icon")) {
        // 信息流-带货
      } else if (item?.note_attributes?.includes("goods")) {
        // 信息流-商品
      } else {
        if (item?.related_ques) {
          delete item.related_ques;
        }
        newItems.push(item);
      }
    }
    obj.data = newItems;
  }
}

// 加载评论区
if (url.includes("/api/sns/v5/note/comment/list?") || url.includes("/api/sns/v3/note/comment/sub_comments?")) {
  replaceRedIdWithFmz200(obj.data);
  let livePhotos = [];
  let note_id = "";
  if (obj.data?.comments?.length > 0) {
    note_id = obj.data.comments[0].note_id;
    for (const comment of obj.data.comments) {
      // comment_type: 0-文字，2-图片/live，3-表情包
      if (comment.comment_type === 3) {
        comment.comment_type = 2;
        console.log(`修改评论类型：3->2`);
      }
      if (comment.media_source_type === 1) {
        comment.media_source_type = 0;
        console.log(`修改媒体类型：1->0`);
      }
      if (comment.pictures?.length > 0) {
        console.log("comment_id: " + comment.id);
        for (const picture of comment.pictures) {
          if (picture.video_id) {
            const picObj = JSON.parse(picture.video_info);
            if (picObj.stream?.h265?.[0]?.master_url) {
              console.log("video_id：" + picture.video_id);
              const videoData = {
                videId: picture.video_id,
                videoUrl: picObj.stream.h265[0].master_url
              };
              livePhotos.push(videoData);
            }
          }
        }
      }
      if (comment.sub_comments?.length > 0) {
        for (const sub_comment of comment.sub_comments) {
          if (sub_comment.comment_type === 3) {
            sub_comment.comment_type = 2;
            console.log(`修改评论类型1：3->2`);
          }
          if (sub_comment.media_source_type === 1) {
            sub_comment.media_source_type = 0;
            console.log(`修改媒体类型1：1->0`);
          }
          if (sub_comment.pictures?.length > 0) {
            console.log("comment_id1: " + comment.id);
            for (const picture of sub_comment.pictures) {
              if (picture.video_id) {
                const picObj = JSON.parse(picture.video_info);
                if (picObj.stream?.h265?.[0]?.master_url) {
                  console.log("video_id1：" + picture.video_id);
                  const videoData = {
                    videId: picture.video_id,
                    videoUrl: picObj.stream.h265[0].master_url
                  };
                  livePhotos.push(videoData);
                }
              }
            }
          }
        }
      }
    }
  }
  console.log("本次note_id：" + note_id);
  if (livePhotos.length > 0) {
    let commitsRsp;
    const commitsCache = $.getdata("fmz200.xiaohongshu.comments.rsp");
    console.log("读取缓存val：" + commitsCache);
    if (!commitsCache) {
      commitsRsp = {noteId: note_id, livePhotos: livePhotos};
    } else {
      commitsRsp = JSON.parse(commitsCache);
      console.log("缓存note_id：" + commitsRsp.noteId);
      if (commitsRsp.noteId === note_id) {
        console.log("增量数据");
        commitsRsp.livePhotos = deduplicateLivePhotos(commitsRsp.livePhotos.concat(livePhotos));
      } else {
        console.log("更换数据");
        commitsRsp = {noteId: note_id, livePhotos: livePhotos};
      }
    }
    console.log("写入缓存val：" + JSON.stringify(commitsRsp));
    $.setdata(JSON.stringify(commitsRsp), "fmz200.xiaohongshu.comments.rsp");
  }
}

// 下载评论区live图
if (url.includes("/api/sns/v1/interaction/comment/video/download?")) {
  const commitsCache = $.getdata("fmz200.xiaohongshu.comments.rsp");
  console.log("读取缓存val：" + commitsCache);
  console.log("目标video_id：" + obj.data.video.video_id);
  if (commitsCache) {
    let commitsRsp = JSON.parse(commitsCache);
    if (commitsRsp.livePhotos.length > 0 && obj.data?.video) {
      for (const item of commitsRsp.livePhotos) {
        // console.log("缓存video_id：" + item.videId);
        if (item.videId === obj.data.video.video_id) {
          console.log("匹配到无水印链接：" + item.videoUrl);
          obj.data.video.video_url = item.videoUrl;
          break;
        }
      }
    }
  } else {
    console.log(`没有[${obj.data?.video.video_id}]的无水印地址`);
  }
}

$done({body: JSON.stringify(obj)});

// 小红书画质增强：加载2K分辨率的图片
function imageEnhance(jsonStr) {
  if (!jsonStr) {
    console.error("jsonStr is undefined or null");
    return [];
  }

  const imageQuality = $.getdata("fmz200.xiaohongshu.imageQuality");
  console.log(`Image Quality: ${imageQuality}`);
  if (imageQuality === "original") { // 原始分辨率，PNG格式的图片，占用空间比较大
    console.log("画质修改为-原始分辨率");
    jsonStr = jsonStr.replace(/\?imageView2\/2[^&]*(?:&redImage\/frame\/0)/, "?imageView2/0/format/png&redImage/frame/0");
  } else { // 高像素输出
    console.log("画质修改为-高像素输出");
    const regex1 = /imageView2\/2\/w\/\d+\/format/g;
    jsonStr = jsonStr.replace(regex1, `imageView2/2/w/2160/format`);

    const regex2 = /imageView2\/2\/h\/\d+\/format/g;
    jsonStr = jsonStr.replace(regex2, `imageView2/2/h/2160/format`);
  }
  console.log('图片画质增强完成✅');

  try {
    return JSON.parse(jsonStr);
  } catch (e) {
    console.error("JSON parsing error: ", e);
    return [];
  }
}

function replaceUrlContent(collectionA, collectionB) {
  console.log('替换无水印的URL');
  collectionA.forEach(itemA => {
    const itemB = collectionB.find(itemB => itemB.file_id === itemA.file_id);
    if (itemB) {
      itemA.url = itemA.url !== "" ? itemA.url.replace(/(.*)\.mp4/, `${itemB.url.match(/(.*)\.mp4/)[1]}.mp4`) : itemB.url;
      itemA.author = "@fmz200"
    }
  });
}

function deduplicateLivePhotos(livePhotos) {
  const seen = new Map();
  livePhotos = livePhotos.filter(item => {
    if (seen.has(item.videId)) {
      return false;
    }
    seen.set(item.videId, true);
    return true;
  });
  return livePhotos;
}

function replaceRedIdWithFmz200(obj) {
  if (Array.isArray(obj)) {
    obj.forEach(item => replaceRedIdWithFmz200(item));
  } else if (typeof obj === 'object' && obj !== null) {
    if ('red_id' in obj) {
      obj.fmz200 = obj.red_id; // 创建新属性fmz200
      delete obj.red_id; // 删除旧属性red_id
    }
    Object.keys(obj).forEach(key => {
      replaceRedIdWithFmz200(obj[key]);
    });
  }
}

function Env(t, e) { class s { constructor(t) { this.env = t } send(t, e = "GET") { t = "string" == typeof t ? { url: t } : t; let s = this.get; return "POST" === e && (s = this.post), new Promise((e, i) => { s.call(this, t, (t, s, r) => { t ? i(t) : e(s) }) }) } get(t) { return this.send.call(this.env, t) } post(t) { return this.send.call(this.env, t, "POST") } } return new class { constructor(t, e) { this.name = t, this.http = new s(this), this.data = null, this.dataFile = "box.dat", this.logs = [], this.isMute = !1, this.isNeedRewrite = !1, this.logSeparator = "\n", this.encoding = "utf-8", this.startTime = (new Date).getTime(), Object.assign(this, e), this.log("", `\ud83d\udd14${this.name}, \u5f00\u59cb!`) } isNode() { return "undefined" != typeof module && !!module.exports } isQuanX() { return "undefined" != typeof $task } isSurge() { return "undefined" != typeof $httpClient && "undefined" == typeof $loon } isLoon() { return "undefined" != typeof $loon } isShadowrocket() { return "undefined" != typeof $rocket } isStash() { return "undefined" != typeof $environment && $environment["stash-version"] } toObj(t, e = null) { try { return JSON.parse(t) } catch { return e } } toStr(t, e = null) { try { return JSON.stringify(t) } catch { return e } } getjson(t, e) { let s = e; const i = this.getdata(t); if (i) try { s = JSON.parse(this.getdata(t)) } catch { } return s } setjson(t, e) { try { return this.setdata(JSON.stringify(t), e) } catch { return !1 } } getScript(t) { return new Promise(e => { this.get({ url: t }, (t, s, i) => e(i)) }) } runScript(t, e) { return new Promise(s => { let i = this.getdata("@chavy_boxjs_userCfgs.httpapi"); i = i ? i.replace(/\n/g, "").trim() : i; let r = this.getdata("@chavy_boxjs_userCfgs.httpapi_timeout"); r = r ? 1 * r : 20, r = e && e.timeout ? e.timeout : r; const [o, a] = i.split("@"), n = { url: `http://${a}/v1/scripting/evaluate`, body: { script_text: t, mock_type: "cron", timeout: r }, headers: { "X-Key": o, Accept: "*/*" } }; this.post(n, (t, e, i) => s(i)) }).catch(t => this.logErr(t)) } loaddata() { if (!this.isNode()) return {}; { this.fs = this.fs ? this.fs : require("fs"), this.path = this.path ? this.path : require("path"); const t = this.path.resolve(this.dataFile), e = this.path.resolve(process.cwd(), this.dataFile), s = this.fs.existsSync(t), i = !s && this.fs.existsSync(e); if (!s && !i) return {}; { const i = s ? t : e; try { return JSON.parse(this.fs.readFileSync(i)) } catch (t) { return {} } } } } writedata() { if (this.isNode()) { this.fs = this.fs ? this.fs : require("fs"), this.path = this.path ? this.path : require("path"); const t = this.path.resolve(this.dataFile), e = this.path.resolve(process.cwd(), this.dataFile), s = this.fs.existsSync(t), i = !s && this.fs.existsSync(e), r = JSON.stringify(this.data); s ? this.fs.writeFileSync(t, r) : i ? this.fs.writeFileSync(e, r) : this.fs.writeFileSync(t, r) } } lodash_get(t, e, s) { const i = e.replace(/\[(\d+)\]/g, ".$1").split("."); let r = t; for (const t of i) if (r = Object(r)[t], void 0 === r) return s; return r } lodash_set(t, e, s) { return Object(t) !== t ? t : (Array.isArray(e) || (e = e.toString().match(/[^.[\]]+/g) || []), e.slice(0, -1).reduce((t, s, i) => Object(t[s]) === t[s] ? t[s] : t[s] = Math.abs(e[i + 1]) >> 0 == +e[i + 1] ? [] : {}, t)[e[e.length - 1]] = s, t) } getdata(t) { let e = this.getval(t); if (/^@/.test(t)) { const [, s, i] = /^@(.*?)\.(.*?)$/.exec(t), r = s ? this.getval(s) : ""; if (r) try { const t = JSON.parse(r); e = t ? this.lodash_get(t, i, "") : e } catch (t) { e = "" } } return e } setdata(t, e) { let s = !1; if (/^@/.test(e)) { const [, i, r] = /^@(.*?)\.(.*?)$/.exec(e), o = this.getval(i), a = i ? "null" === o ? null : o || "{}" : "{}"; try { const e = JSON.parse(a); this.lodash_set(e, r, t), s = this.setval(JSON.stringify(e), i) } catch (e) { const o = {}; this.lodash_set(o, r, t), s = this.setval(JSON.stringify(o), i) } } else s = this.setval(t, e); return s } getval(t) { return this.isSurge() || this.isLoon() ? $persistentStore.read(t) : this.isQuanX() ? $prefs.valueForKey(t) : this.isNode() ? (this.data = this.loaddata(), this.data[t]) : this.data && this.data[t] || null } setval(t, e) { return this.isSurge() || this.isLoon() ? $persistentStore.write(t, e) : this.isQuanX() ? $prefs.setValueForKey(t, e) : this.isNode() ? (this.data = this.loaddata(), this.data[e] = t, this.writedata(), !0) : this.data && this.data[e] || null } initGotEnv(t) { this.got = this.got ? this.got : require("got"), this.cktough = this.cktough ? this.cktough : require("tough-cookie"), this.ckjar = this.ckjar ? this.ckjar : new this.cktough.CookieJar, t && (t.headers = t.headers ? t.headers : {}, void 0 === t.headers.Cookie && void 0 === t.cookieJar && (t.cookieJar = this.ckjar)) } get(t, e = (() => { })) { if (t.headers && (delete t.headers["Content-Type"], delete t.headers["Content-Length"]), this.isSurge() || this.isLoon()) this.isSurge() && this.isNeedRewrite && (t.headers = t.headers || {}, Object.assign(t.headers, { "X-Surge-Skip-Scripting": !1 })), $httpClient.get(t, (t, s, i) => { !t && s && (s.body = i, s.statusCode = s.status ? s.status : s.statusCode, s.status = s.statusCode), e(t, s, i) }); else if (this.isQuanX()) this.isNeedRewrite && (t.opts = t.opts || {}, Object.assign(t.opts, { hints: !1 })), $task.fetch(t).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => e(t && t.error || "UndefinedError")); else if (this.isNode()) { let s = require("iconv-lite"); this.initGotEnv(t), this.got(t).on("redirect", (t, e) => { try { if (t.headers["set-cookie"]) { const s = t.headers["set-cookie"].map(this.cktough.Cookie.parse).toString(); s && this.ckjar.setCookieSync(s, null), e.cookieJar = this.ckjar } } catch (t) { this.logErr(t) } }).then(t => { const { statusCode: i, statusCode: r, headers: o, rawBody: a } = t, n = s.decode(a, this.encoding); e(null, { status: i, statusCode: r, headers: o, rawBody: a, body: n }, n) }, t => { const { message: i, response: r } = t; e(i, r, r && s.decode(r.rawBody, this.encoding)) }) } } post(t, e = (() => { })) { const s = t.method ? t.method.toLocaleLowerCase() : "post"; if (t.body && t.headers && !t.headers["Content-Type"] && (t.headers["Content-Type"] = "application/x-www-form-urlencoded"), t.headers && delete t.headers["Content-Length"], this.isSurge() || this.isLoon()) this.isSurge() && this.isNeedRewrite && (t.headers = t.headers || {}, Object.assign(t.headers, { "X-Surge-Skip-Scripting": !1 })), $httpClient[s](t, (t, s, i) => { !t && s && (s.body = i, s.statusCode = s.status ? s.status : s.statusCode, s.status = s.statusCode), e(t, s, i) }); else if (this.isQuanX()) t.method = s, this.isNeedRewrite && (t.opts = t.opts || {}, Object.assign(t.opts, { hints: !1 })), $task.fetch(t).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => e(t && t.error || "UndefinedError")); else if (this.isNode()) { let i = require("iconv-lite"); this.initGotEnv(t); const { url: r, ...o } = t; this.got[s](r, o).then(t => { const { statusCode: s, statusCode: r, headers: o, rawBody: a } = t, n = i.decode(a, this.encoding); e(null, { status: s, statusCode: r, headers: o, rawBody: a, body: n }, n) }, t => { const { message: s, response: r } = t; e(s, r, r && i.decode(r.rawBody, this.encoding)) }) } } time(t, e = null) { const s = e ? new Date(e) : new Date; let i = { "M+": s.getMonth() + 1, "d+": s.getDate(), "H+": s.getHours(), "m+": s.getMinutes(), "s+": s.getSeconds(), "q+": Math.floor((s.getMonth() + 3) / 3), S: s.getMilliseconds() }; /(y+)/.test(t) && (t = t.replace(RegExp.$1, (s.getFullYear() + "").substr(4 - RegExp.$1.length))); for (let e in i) new RegExp("(" + e + ")").test(t) && (t = t.replace(RegExp.$1, 1 == RegExp.$1.length ? i[e] : ("00" + i[e]).substr(("" + i[e]).length))); return t } msg(e = t, s = "", i = "", r) { const o = t => { if (!t) return t; if ("string" == typeof t) return this.isLoon() ? t : this.isQuanX() ? { "open-url": t } : this.isSurge() ? { url: t } : void 0; if ("object" == typeof t) { if (this.isLoon()) { let e = t.openUrl || t.url || t["open-url"], s = t.mediaUrl || t["media-url"]; return { openUrl: e, mediaUrl: s } } if (this.isQuanX()) { let e = t["open-url"] || t.url || t.openUrl, s = t["media-url"] || t.mediaUrl, i = t["update-pasteboard"] || t.updatePasteboard; return { "open-url": e, "media-url": s, "update-pasteboard": i } } if (this.isSurge()) { let e = t.url || t.openUrl || t["open-url"]; return { url: e } } } }; if (this.isMute || (this.isSurge() || this.isLoon() ? $notification.post(e, s, i, o(r)) : this.isQuanX() && $notify(e, s, i, o(r))), !this.isMuteLog) { let t = ["", "==============\ud83d\udce3\u7cfb\u7edf\u901a\u77e5\ud83d\udce3=============="]; t.push(e), s && t.push(s), i && t.push(i), console.log(t.join("\n")), this.logs = this.logs.concat(t) } } log(...t) { t.length > 0 && (this.logs = [...this.logs, ...t]), console.log(t.join(this.logSeparator)) } logErr(t, e) { const s = !this.isSurge() && !this.isQuanX() && !this.isLoon(); s ? this.log("", `\u2757\ufe0f${this.name}, \u9519\u8bef!`, t.stack) : this.log("", `\u2757\ufe0f${this.name}, \u9519\u8bef!`, t) } wait(t) { return new Promise(e => setTimeout(e, t)) } done(t = {}) { const e = (new Date).getTime(), s = (e - this.startTime) / 1e3; this.log("", `\ud83d\udd14${this.name}, \u7ed3\u675f! \ud83d\udd5b ${s} \u79d2`), this.log(), this.isSurge() || this.isQuanX() || this.isLoon() ? $done(t) : this.isNode() && process.exit(1) } }(t, e) }